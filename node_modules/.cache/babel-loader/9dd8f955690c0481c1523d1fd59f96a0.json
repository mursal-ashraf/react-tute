{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(response => {\n        if (!response.ok) {\n          throw Error('Could not fetch data');\n        }\n\n        return response.json();\n      }).then(response => {\n        setData(response); // console.log(response.blogs);\n\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        // console.log('fetch failed ', err.message);\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          setError(err.message);\n          setIsPending(false);\n        }\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","response","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/Users/mashraf/Desktop/dojo-blog/src/useFetch.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            fetch(url, { signal : abortCont.signal })\n            .then((response) => {\n                if (!response.ok){\n                    throw Error('Could not fetch data');\n                }\n                return response.json();\n            }).then((response) => {\n                setData(response);\n                // console.log(response.blogs);\n                setIsPending(false);\n                setError(null);\n            }).catch((err) => {\n                // console.log('fetch failed ', err.message);\n                if (err.name === 'AbortError'){\n                    console.log('fetch aborted');\n                } else {\n                    setError(err.message);\n                    setIsPending(false);\n                }\n            });\n        }, 1000);\n\n        return () => abortCont.abort();\n    }, [url]);\n\n    return { data, isPending, error};\n}\n\nexport default useFetch;"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EACtB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IAEZ,MAAMU,SAAS,GAAG,IAAIC,eAAJ,EAAlB;IAEAC,UAAU,CAAC,MAAM;MACbC,KAAK,CAACV,GAAD,EAAM;QAAEW,MAAM,EAAGJ,SAAS,CAACI;MAArB,CAAN,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAd,EAAiB;UACb,MAAMC,KAAK,CAAC,sBAAD,CAAX;QACH;;QACD,OAAOF,QAAQ,CAACG,IAAT,EAAP;MACH,CAND,EAMGJ,IANH,CAMSC,QAAD,IAAc;QAClBX,OAAO,CAACW,QAAD,CAAP,CADkB,CAElB;;QACAT,YAAY,CAAC,KAAD,CAAZ;QACAE,QAAQ,CAAC,IAAD,CAAR;MACH,CAXD,EAWGW,KAXH,CAWUC,GAAD,IAAS;QACd;QACA,IAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA8B;UAC1BC,OAAO,CAACC,GAAR,CAAY,eAAZ;QACH,CAFD,MAEO;UACHf,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;UACAlB,YAAY,CAAC,KAAD,CAAZ;QACH;MACJ,CAnBD;IAoBH,CArBS,EAqBP,IArBO,CAAV;IAuBA,OAAO,MAAMG,SAAS,CAACgB,KAAV,EAAb;EACH,CA5BQ,EA4BN,CAACvB,GAAD,CA5BM,CAAT;EA8BA,OAAO;IAAEC,IAAF;IAAQE,SAAR;IAAmBE;EAAnB,CAAP;AACH,CApCD;;GAAMN,Q;;AAsCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}